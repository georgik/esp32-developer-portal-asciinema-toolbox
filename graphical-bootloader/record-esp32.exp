#!/usr/bin/expect -f

# Set timeout to -1 to wait indefinitely for responses
set timeout -1

# Function to simulate human typing
proc type_command {cmd} {
    foreach c [split $cmd ""] {
        send -- "$c"
        sleep 0.02
        expect -re "."
    }
    sleep 1  ;# Delay to allow the viewer to grasp the typed command
    send "\r"
    expect -re "."
}

# Function to simulate human typing for file content
proc type_file_content {content} {
    foreach line [split $content "\n"] {
        send -- "$line\n"
        sleep 0.02  ;# Delay between lines
    }
    send "\r"
    expect -re "."
}

# Start a bash shell
spawn bash

expect "$ "
type_command "git clone https://github.com/georgik/esp32-graphical-bootloader.git"

expect "$ "
type_command "cd esp32-graphical-bootloader/apps"

expect "$ "
type_command "idf.py create-project hello_app"

expect "$ "
type_command "cd hello_app"

expect "$ "
type_command "idf.py set-target esp32s3"

expect "$ "
type_command "cp ../calculator/sdkconfig.defaults ."

expect "$ "
type_command "cp ../calculator/sdkconfig.defaults.esp-box-3 ."

expect "$ "
type_command "idf.py add-dependency \"espressif/esp-box-3^1.2.0\""

expect "$ "
type_command "idf.py add-dependency \"espressif/esp_codec_dev==1.1.0\""

# Content of the main/hello_app.c file
set file_content {
#include <stdio.h>
#include \"freertos/FreeRTOS.h\"
#include \"freertos/task.h\"
#include \"esp_log.h\"
#include \"lvgl.h\"
#include \"bsp/esp-bsp.h\"
#include \"esp_ota_ops.h\"

void reset_to_factory_app() {
    // Get the partition structure for the factory partition
    const esp_partition_t *factory_partition = esp_partition_find_first(ESP_PARTITION_TYPE_APP, ESP_PARTITION_SUBTYPE_APP_FACTORY, NULL);
    if (factory_partition != NULL) {
        if (esp_ota_set_boot_partition(factory_partition) == ESP_OK) {
            printf(\"Set boot partition to factory, restarting now.\\n\");
        } else {
            printf(\"Failed to set boot partition to factory.\\n\");
        }
    } else {
        printf(\"Factory partition not found.\\n\");
    }

    fflush(stdout);
}

void app_main(void) {
    reset_to_factory_app();

    // Initialize the BSP
    bsp_i2c_init();
    bsp_display_start();

    // Create a label and set its text
    lv_obj_t *label = lv_label_create(lv_scr_act());
    lv_label_set_text(label, \"Hello ESP32-S3-BOX-3\");
    lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);

    // Start the display backlight
    bsp_display_backlight_on();

    printf(\"Hello ESP32-S3-BOX-3\\n\");

    // Handle LVGL tasks
    while (1) {
        lv_task_handler();
        vTaskDelay(pdMS_TO_TICKS(10));
    }
}
}

# Write the content to main/hello_app.c
expect "$ "
type_file_content "echo \"${file_content}\" > main/hello_app.c"

expect "$ "
type_command "idf.py @../../boards/esp-box-3.cfg build"

# Wait for the specific pattern indicating build completion
expect {
    -re "after hard_reset write_flash \"@flash_args\"" { exp_continue }
    "$ "
}

# Step 4: Flash the Project
type_command "esptool.py --chip esp32s3 write_flash 0x220000 build.esp-box-3/hello_app.bin"
expect "$ "

# Exit the shell
expect "$ "
type_command "exit"

# End of the script
expect eof
